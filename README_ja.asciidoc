= DebugTrace-net

link:README.asciidoc[[English]]

*DebugTrace-net* は、.NETプログラムのデバッグ時にトレースログを出力するライブラリで、 https://docs.microsoft.com/ja-jp/dotnet/standard/net-standard[.NET Standard 2.0]に対応しています。 +
メソッドの開始と終了箇所に `Trace.Enter()` および `Trace.Leave()` を埋め込む事で、開発中のプログラムの実行状況をログに出力する事ができます。

=== 1. 特徴

* コール元の *クラス名* 、 *メソッド名* 、 *ソースファイル名* および *行番号* を自動的に出力。
* メソッドやオブジェクトのネストで、ログを *自動的にインデント* 。
* 値の出力で *自動的に改行* 。
* *スレッドの切り替え時* に自動的にログを出力。
* `ToString` メソッドを実装していないクラスのオブジェクトでも *リフレクション* を使用して内容を出力。
* `DebugTrace.properties` で、出力内容のカスタマイズが可能。
* 依存するライブラリがない (コンソールに出力する場合)。
* 各種ロギング・ライブラリを使用可能。
    ** https://logging.apache.org/log4net/[log4net]
    ** http://nlog-project.org/[NLog]

=== 2. インストール
NuGetから `DebugTrace` パッケージを検索してインストールしてください。 +
https://logging.apache.org/log4net/[log4net]または http://nlog-project.org/[NLog]を使用してログを出力する場合は、 `DebugTrace.Log4net` または `DebugTrace.NLog` をインストールしてください。 +
`DebugTrace.Log4net` および `DebugTrace.NLog` は、(https://docs.microsoft.com/ja-jp/dotnet/standard/net-standard[.NET Standard]ではなく).NET Framework 4.7に対応しています。

=== 3. 使用方法

デバッグ対象および関連するメソッドに対して以下を行います。

. メソッドの先頭に `Trace.Enter()` を挿入する。
. メソッドの終了(または `return` 文の直前)に `Trace.Leave()` を挿入する。
. 必要に応じて変数をログに出力する `Trace.Print("foo", foo)` を挿入する。

以下は、DebugTrace-netを使用したC#, Visual Basicの例とそれを実行した際のログです。

[source,csharp]
.ReadmeExample.cs
----
using System;
using static DebugTrace.CSharp; // for Debugging

namespace Readme {
    /// <summary>ReadmeExample</summary>
    public class ReadmeExample {
        public static void Main(string[] args) {
            Trace.Enter(); // for Debugging

            var contact = new Contact(1, "Akane", "Apple", new DateTime(1991, 2, 3));
            Trace.Print("contact", contact); // for Debugging

            Trace.Leave(); // for Debugging
        }
    }

    /// <summary>Entity</summary>
    public class Entity {
        public int ID;

        public Entity(int id) {
            ID = id;
        }
    }

    /// <summary>ContactBase</summary>
    public class ContactBase : Entity {
        public string FirstName;
        public string LastName;

        public ContactBase(int id, string firstName, string lastName) : base(id) {
            FirstName = firstName; LastName  = lastName ;
        }
    }

    /// <summary>Contact</summary>
    public class Contact : ContactBase {
        public DateTime Birthday;

        public Contact(int id, string firstName, string lastName, DateTime birthday) : base(id, firstName, lastName) {
            Birthday  = birthday ;
        }
    }
}
----

.コンソール出力 / C#
----
2018-03-28 01:10:51.413 ______________________________ Thread 1 ______________________________
2018-03-28 01:10:51.413
2018-03-28 01:10:51.473 Enter Readme.ReadmeExample.Main(String[] args) (ReadmeExample.cs:8)
2018-03-28 01:10:51.500 | contact = Readme.Contact {
2018-03-28 01:10:51.500 |   ____ Readme.Entity ____
2018-03-28 01:10:51.501 |   ID: 1,
2018-03-28 01:10:51.501 |   ____ Readme.ContactBase ____
2018-03-28 01:10:51.501 |   FirstName: "Akane", LastName: "Apple",
2018-03-28 01:10:51.501 |   ____ Readme.Contact ____
2018-03-28 01:10:51.501 |   Birthday: 1991-02-03 12:00:00.000,
2018-03-28 01:10:51.501 | } (ReadmeExample.cs:11)
2018-03-28 01:10:51.509 Leave Readme.ReadmeExample.Main(String[] args) (ReadmeExample.cs:13)
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Global.Readme
    ''' <summary>ReadmeExample</summary>
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            Trace.Enter() ' for Debugging

            Dim contact = New Contact(1, "Akane", "Apple", New DateTime(1991, 2, 3))
            Trace.Print(NameOf(contact), contact) ' for Debugging

            Trace.Leave() ' for Debugging
        End Sub
    End Class

    ''' <summary>Entity</summary>
    Public Class Entity
        Public Property ID As Integer

        Public Sub New(id_ As Integer)
            ID = id_
        End Sub
    End Class

    ''' <summary>ContactBase</summary>
    Public Class ContactBase : Inherits Entity
        Public Property FirstName As String
        Public Property LastName As String

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String)
            MyBase.New(id_)
            FirstName = firstName_ : LastName = lastName_
        End Sub
    End Class

    ''' <summary>Contact</summary>
    Public Class Contact : Inherits ContactBase
        Public Birthday As DateTime

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String, birthday_ As DateTime)
            MyBase.New(id_, firstName_, lastName_)
            Birthday = birthday_
        End Sub
    End Class
End Namespace
----

.コンソール出力 / Visual Basic
----
2018-03-28 02:30:08.528 ______________________________ Thread 1 ______________________________
2018-03-28 02:30:08.528
2018-03-28 02:30:08.591 Enter Readme.ReadmeExample.Main(String[] args) (ReadmeExample.vb:8)
2018-03-28 02:30:08.619 | contact = Readme.Contact {
2018-03-28 02:30:08.619 |   ____ Readme.Entity ____
2018-03-28 02:30:08.619 |   ID: 1,
2018-03-28 02:30:08.619 |   ____ Readme.ContactBase ____
2018-03-28 02:30:08.619 |   FirstName: "Akane", LastName: "Apple",
2018-03-28 02:30:08.620 |   ____ Readme.Contact ____
2018-03-28 02:30:08.620 |   Birthday: 1991-02-03 12:00:00.000,
2018-03-28 02:30:08.620 | } (ReadmeExample.vb:11)
2018-03-28 02:30:08.627 Leave Readme.ReadmeExample.Main(String[] args) (ReadmeExample.vb:13)
----

=== 3. インタフェース、クラス

主に以下のインタフェース、クラスがあります。

[options="header", width="100%"]
.インタフェース、クラス
|===
|名前    |スーパークラス、実装するインタフェース|説明
|`DebugTrace.ITrace`       |_なし_              |Trace処理のインタフェース
|`DebugTrace.TraceBase`    |`DebugTrace.ITrace` |Trace処理のベースクラス
|`DebugTrace.CSharp`       |`DebugTrace.Trace`  |C#用のTrace処理のクラス
|`DebugTrace.VisualBasic`  |`DebugTrace.Trace`  |VisualBasic用のTrace処理のクラス
|`DebugTrace.ILogger`      |_なし_              |ログ出力のインタフェース
|`DebugTrace.Console`      |`DebugTrace.ILogger`|ログをコンソール出力する抽象クラス
|`DebugTrace.Console+Out`  |`DebugTrace.Console`|ログを標準出力に出力するクラス
|`DebugTrace.Console+Error`|`DebugTrace.Console`|ログを標準エラー出力に出力するクラス
|===

=== 4. DebugTrace.CSharpおよびDebugTrace.VisualBasicクラスのプロパティ

`DebugTrace.CSharp` クラスと `DebugTrace.VisualBasic` クラスには自身の型のインスタンスとして `Trace` プロパティがあります。

=== 5. ITraceインタフェースのプロパティおよびメソッド

以下のプロパティおよびメソッドがあります。

[options="header", width="60%"]
.プロパティ
|===
|名前|説明
|`IsEnabled`
|ログ出力が有効なら `true` 、そうでなければ `false`  (`get` のみ)

|`LastLog`
|最後に出力したログ文字列 (`get` のみ)

|===

[options="header"]
.メソッド
|===
|名 前|引 数|戻り値|説明
|`ResetNest`
|なし
|なし
|現在のスレッドのネストレベルを初期化する

|`Enter`
|なし
|`int` スレッドID
|メソッドの開始をログに出力する

|`Leave`
|`int threadId`: スレッドID (デフォルト: `-1`)
|なし
|メソッドの終了をログに出力する

|`Print`
|`string message`: メッセージ
|なし
|メッセージをログに出力する

|`Print`
|`Func<string> messageSupplier`: メッセージを返す関数
|なし
|`messageSupplier` からメッセージを取得してログに出力する

|`Print`
|`string name`: 値の名前 +
`object value`: 値
|なし
|`<値の名前> = <値>` +
の形式でログに出力する

|`Print`
|`string name`: 値の名前 +
`Func<object> valueSupplier`: 値を返す関数
|なし
|`valueSupplier` から値を取得して +
`<値の名前> = <値>` +
の形式でログに出力する

|===

=== 6. *DebugTrace.properties* ファイルのプロパティ

DebugTrace は、DebugTrace.dllと同一ディレクトリにある `DebugTrace.properties` ファイルを起動時に読み込みます。
`DebugTrace.properties` ファイルには以下のプロパティを指定できます。

[options="header"]
.DebugTrace.properties
|===
|プロパティ名|設定する値|デフォルト値
|`Logger`
| DebugTrace が使用するロガー +
以下のいずれか +
`Log4net`: log4netを使用 +
`NLog`: NLogを使用 +
`Console+Out`: コンソール(標準出力)へ出力 +
`Console+Error`: コンソール(標準エラー出力)へ出力
|`Console+Error`

|`LogLevel`
|使用する *ログレベル* +
以下のいずれか +
*Log4net*: `All`, `Finest`, `Verbose`, `Finer`, `Trace`, `Fine`, `Debug`, `Info`, `Notice`, `Warn`, `Error`, `Severe`, `Critical`, `Alert`, `Fatal`, `Emergency`, `Off`, +
*NLog*: `Trace`, `Debug`, `Info`, `Warn`, `Error`, `Fatal`, `Off`, +
|`Debug`

|`EnterString`
|`Enter` メソッドで出力される文字列 +
 +
_パラメータ:_ +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号
|`Enter {0}.{1} ({2}:{3:D})`

|`LeaveString`
|`Leave` メソッドでで出力される文字列 +
 +
_パラメータ:_ +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号
|`Leave {0}.{1} ({2}:{3:D})`

|`ThreadBoundaryString`
|*スレッド境界* で出力される文字列 +
 +
_パラメータ:_ +
`{0}`: スレッドID
|`\____\__\__\__\__\__\__\__\__\__\__\__\__\__ Thread {0} \__\__\__\__\__\__\__\__\__\__\__\__\__\____`

|`ClassBoundaryString`
|*クラス境界* での出力文字列 +
 +
_パラメータ:_ +
`{0}`: クラス名
|`\\____ {0} \____`

|`CodeIndentString`
|*コードのインデント* 文字列 +
`\s` _は空白文字に置き換えられます_
|`\|\s`

|`DataIndentString`
|*データのインデント* 文字列 +
`\s` _は空白文字に置き換えられます_
|`\s\s`

|`LimitString`
|*制限* を超えた場合の出力 *文字列*
|`\...`

|`DefaultNameSpaceString` +
|デフォルトの *名前空間* を置き換える文字列
|`\...`

|`NonPrintString`
|*出力しない* プロパティ値の文字列
|`\***`

|`CyclicReferenceString`
|*循環参照* 時の出力文字列
|`\*\** Cyclic Reference \***`

|`VarNameValueSeparator`
|*変数名と値* のセパレータ +
`\s` _は空白文字に置き換えられます_
|`\s=\s`

|`KeyValueSeparator`
|マップの *キーと値* のセパレータ + 
*プロパティ名/フィールド名と値* のセパレータ +
`\s` _は空白文字に置き換えられます_
|`:\s`

|`PrintSuffixFormat`
|`print` メソッドで付加される文字列 +
`\s` _は空白文字に置き換えられます_ +
 +
_パラメータ:_ +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号 +
|`\s({2}:{3:D})`

|`DateTimeFormat`
|*日時* の出力フォーマット +
 +
_パラメータ:_ +
`{0}`: `DateTime` オブジェクト
|`{0:yyyy-MM-dd HH:mm:ss.fff}`

|`MaxDataOutputWidth`
|データの出力幅の最大値
|80

|`CollectionLimit`
|`ICollection` 要素の出力数の *限界値*
|512

|`StringLimit`
|`string` の出力文字数の *制限*
|8192

|`ReflectionNestLimit`
|*リフレクション* のネストの *限界値*
|4

|`NonPrintProperties`
|*出力しない* プロパティおよびフィールドの配列 +
 +
`[Teal]#値のフォーマット#:` +
`<フルクラス名>.<プロパティ名またはフィールド名>,` +
`<フルクラス名>.<プロパティ名またはフィールド名>,` +
`\...`
|_空_

|`DefaultNameSpace`
|デフォルトの * 名前空間*
|_なし_

|`ReflectionClasses`
|`ToString` メソッドを実装していても *リフレクション* で内容を出力する *クラス名* のセット
|_空_

|===

==== 6.1. *NonPrintProperties*, *NonPrintString*

DebugTrace は、 `ToString` メソッドが実装されていない場合は、リフレクションを使用してオブジェクト内容を出力します。
他のオブジェクトの参照があれば、そのオブジェクトの内容も出力します。
ただし循環参照がある場合は、自動的に検出して出力を中断します。  
`NonPrintProperties` プロパティを指定して出力を抑制する事もできます。
このプロパティの値は、カンマ区切りで複数指定できます。  
`NonPrintProperties` で指定されたプロパティの値は、 `NonPrintString` で指定された文字列(デフォルト: `\***`)で出力されます。

.NonPrintPropertiesの例
----
NonPrintProperties = DebugTraceExample.Node.Parent
----

.NonPrintProperties(複数指定)の例
----
NonPrintProperties = \
    DebugTraceExample.Node.Parent,\
    DebugTraceExample.Node.Left,\
    DebugTraceExample.Node.Right
----

=== 7. ロギング・ライブラリの使用

コンソール出力以外に以下のライブラリを使用してログ出力が可能です。

[options="header", width="60%"]
.ロギング・ライブラリ
|===
|ライブラリ名|必要なパッケージ  |API
|log4net     |DebugTrace.Log4net|.NET Framework 4.7
|NLog        |DebugTrace.NLog   |.NET Framework 4.7
|===

使用する場合は、上記パッケージをNuGetから追加してください。

ロギング・ライブラリを使用する際のDebugTraceのロガー名は、 `DebugTrace` です。

==== 7-1. log4net

[source,properties]
.DebugTrace.propertiesの例
----
# DebugTrace.properties
Logger = Log4net
----

[source,csharp]
.AssemblyInfo.csの追加例
----
[assembly: log4net.Config.XmlConfigurator(ConfigFile=@"Log4net.config", Watch=true)]
----

[source,xml]
.Log4net.configの例
----
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <log4net>
    <appender name="A" type="log4net.Appender.FileAppender">
      <File value="C:/Logs/DebugTrace/Log4net.log" />
      <AppendToFile value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <ConversionPattern value="%date [%thread] %-5level %logger %message%n" />
      </layout>
    </appender>
    <root>
      <level value="DEBUG" />
      <appender-ref ref="A" />
    </root>
  </log4net>
</configuration>
----

==== 7-2. NLog

[source,properties]
.DebugTrace.propertiesの例
----
# DebugTrace.properties
Logger = NLog
----

[source,xml]
.NLog.configの例
----
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="C:/Logs/DebugTrace/NLog-internal.log">
  <targets>
    <target xsi:type="File" name="f" fileName="C:/Logs/DebugTrace/NLog.log"
            layout="${longdate} [${threadid}] ${uppercase:${level}} ${logger} ${message}" />
  </targets>
  <rules>
    <logger name="*" minlevel="Debug" writeTo="f" />
  </rules>
</nlog>
----

=== 8. ライセンス

link:LICENSE[MIT ライセンス(MIT)]

_(C) 2018 Masato Kokubo_
