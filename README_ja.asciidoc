= DebugTrace-net

link:README.asciidoc[[English]]

*DebugTrace-net* は、.NETプログラムのデバッグ時にトレースログを出力するライブラリで、 https://docs.microsoft.com/ja-jp/dotnet/standard/net-standard[.NET Standard 2.0]に対応しています。 +
メソッドの開始と終了箇所に `Trace.Enter()` および `Trace.Leave()` を埋め込む事で、開発中のプログラムの実行状況をログに出力する事ができます。

=== 1. 特徴

* コール元の *クラス名* 、 *メソッド名* 、 *ソースファイル名* および *行番号* を自動的に出力。
* メソッドやオブジェクトのネストで、ログを *自動的にインデント* 。
* 値の出力で *自動的に改行* 。
* *スレッドの切り替え時* に自動的にログを出力。
* `ToString` メソッドを実装していないクラスのオブジェクトでも *リフレクション* を使用して内容を出力。
* `DebugTrace.properties` で、出力内容のカスタマイズが可能。
* 依存するライブラリがない (コンソールに出力する場合)。
* 各種ロギング・ライブラリを使用可能。
    ** https://logging.apache.org/log4net/[log4net]
    ** http://nlog-project.org/[NLog]

=== 2. インストール
NuGetから `DebugTrace` パッケージを検索してインストールしてください。 +
https://logging.apache.org/log4net/[log4net]または http://nlog-project.org/[NLog]を使用してログを出力する場合は、 `DebugTrace.Log4net` または `DebugTrace.NLog` をインストールしてください。 +
`DebugTrace.Log4net` および `DebugTrace.NLog` は、(https://docs.microsoft.com/ja-jp/dotnet/standard/net-standard[.NET Standard]ではなく).NET Framework 4.7に対応しています。

=== 3. 使用方法

デバッグ対象および関連するメソッドに対して以下を行います。

. メソッドの先頭に `Trace.Enter()` を挿入する。
. メソッドの終了(または `return` 文の直前)に `Trace.Leave()` を挿入する。
. 必要に応じて変数をログに出力する `Trace.Print("foo", foo)` を挿入する。

以下は、DebugTrace-netを使用したC#, Visual Basicの例とそれを実行した際のログです。

[source,csharp]
.ReadmeExample.cs
----
using System;
using static DebugTrace.CSharp; // for Debugging

namespace Readme {
    /// <summary>ReadmeExample</summary>
    public class ReadmeExample {
        public static void Main(string[] args) {
            Trace.Enter(); // for Debugging

            var contact = new [] {
                new Contact(1, "Akane" , "Apple", new DateTime(1991, 2, 3)),
                new Contact(2, "Yukari", "Apple", new DateTime(1992, 3, 4))
            };
            Trace.Print("contact", contact); // for Debugging

            Trace.Leave(); // for Debugging
        }
    }

    /// <summary>Entity</summary>
    public class Entity {
        public int ID;

        public Entity(int id) {
            ID = id;
        }
    }

    /// <summary>ContactBase</summary>
    public class ContactBase : Entity {
        public string FirstName;
        public string LastName;

        public ContactBase(int id, string firstName, string lastName) : base(id) {
            FirstName = firstName; LastName  = lastName ;
        }
    }

    /// <summary>Contact</summary>
    public class Contact : ContactBase {
        public DateTime Birthday;

        public Contact(int id, string firstName, string lastName, DateTime birthday) : base(id, firstName, lastName) {
            Birthday  = birthday ;
        }
    }
}
----

.コンソール出力 / C#
----
2018-10-13 16:45:08.662 [03] DebugTrace-net 1.4.3
2018-10-13 16:45:08.663 [03]   Referenced properties file: Z:\Develop\C#\DebugTrace\DebugTrace\DebugTraceTest\bin\Debug\netcoreapp2.1\DebugTrace.properties
2018-10-13 16:45:08.663 [03]   Logger wrapper: DebugTrace.Console+Error
2018-10-13 16:45:08.665 [03] 
2018-10-13 16:45:08.665 [03] ______________________________ Thread 3 ______________________________
2018-10-13 16:45:08.665 [03] 
2018-10-13 16:45:08.733 [03] Enter Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:14)
2018-10-13 16:45:08.762 [03] | 
2018-10-13 16:45:08.762 [03] | contacts = Readme.Contact[2] {
2018-10-13 16:45:08.762 [03] |   Readme.Contact {
2018-10-13 16:45:08.762 [03] |     ____ Readme.Entity ____
2018-10-13 16:45:08.762 [03] |     ID: 1, 
2018-10-13 16:45:08.762 [03] |     ____ Readme.ContactBase ____
2018-10-13 16:45:08.762 [03] |     FirstName: "Akane", LastName: "Apple", 
2018-10-13 16:45:08.762 [03] |     ____ Readme.Contact ____
2018-10-13 16:45:08.763 [03] |     Birthday: 1991-02-03 00:00:00.0000000, 
2018-10-13 16:45:08.763 [03] |   }, 
2018-10-13 16:45:08.763 [03] |   Readme.Contact {
2018-10-13 16:45:08.763 [03] |     ____ Readme.Entity ____
2018-10-13 16:45:08.763 [03] |     ID: 2, 
2018-10-13 16:45:08.763 [03] |     ____ Readme.ContactBase ____
2018-10-13 16:45:08.763 [03] |     FirstName: "Yukari", LastName: "Apple", 
2018-10-13 16:45:08.763 [03] |     ____ Readme.Contact ____
2018-10-13 16:45:08.763 [03] |     Birthday: 1992-03-04 00:00:00.0000000, 
2018-10-13 16:45:08.763 [03] |   }, 
2018-10-13 16:45:08.763 [03] | } (ReadmeExamples.cs:20)
2018-10-13 16:45:08.763 [03] | 
2018-10-13 16:45:08.768 [03] Leave Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:22) time: 00:00:00.0298047
----

[source,vb.net]
.ReadmeExample.vb
----
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Global.Readme
    ''' <summary>ReadmeExample</summary>
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            Trace.Enter() ' for Debugging

            Dim contact = New Contact() {
                New Contact(1, "Akane", "Apple", New DateTime(1991, 2, 3)),
                New Contact(2, "Yukari", "Apple", New DateTime(1992, 3, 4))
            }
            Trace.Print(NameOf(contact), contact) ' for Debugging

            Trace.Leave() ' for Debugging
        End Sub
    End Class

    ''' <summary>Entity</summary>
    Public Class Entity
        Public Property ID As Integer

        Public Sub New(id_ As Integer)
            ID = id_
        End Sub
    End Class

    ''' <summary>ContactBase</summary>
    Public Class ContactBase : Inherits Entity
        Public Property FirstName As String
        Public Property LastName As String

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String)
            MyBase.New(id_)
            FirstName = firstName_ : LastName = lastName_
        End Sub
    End Class

    ''' <summary>Contact</summary>
    Public Class Contact : Inherits ContactBase
        Public Birthday As DateTime

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String, birthday_ As DateTime)
            MyBase.New(id_, firstName_, lastName_)
            Birthday = birthday_
        End Sub
    End Class
End Namespace
----

.コンソール出力 / Visual Basic
----
2018-10-13 16:45:39.968 [12] DebugTrace-net 1.4.3
2018-10-13 16:45:39.970 [12]   Referenced properties file: Z:\Develop\C#\DebugTrace\DebugTrace\DebugTraceVBTest\bin\Debug\DebugTrace.properties
2018-10-13 16:45:39.970 [12]   Logger wrapper: DebugTrace.Console+Error
2018-10-13 16:45:39.972 [12] 
2018-10-13 16:45:39.972 [12] ______________________________ Thread 12 ______________________________
2018-10-13 16:45:39.972 [12] 
2018-10-13 16:45:40.063 [12] Enter DebugTraceVBTest.Readme.ReadmeExample1.Example1() (ReadmeExamples.vb:14)
2018-10-13 16:45:40.084 [12] | 
2018-10-13 16:45:40.084 [12] | contacts = DebugTraceVBTest.Readme.Contact[2] {
2018-10-13 16:45:40.084 [12] |   DebugTraceVBTest.Readme.Contact {
2018-10-13 16:45:40.084 [12] |     ____ DebugTraceVBTest.Readme.Entity ____
2018-10-13 16:45:40.084 [12] |     Id: 1, 
2018-10-13 16:45:40.084 [12] |     ____ DebugTraceVBTest.Readme.ContactBase ____
2018-10-13 16:45:40.084 [12] |     FirstName: "Akane", LastName: "Apple", 
2018-10-13 16:45:40.084 [12] |     ____ DebugTraceVBTest.Readme.Contact ____
2018-10-13 16:45:40.084 [12] |     Birthday: 1991-02-03 00:00:00.0000000, 
2018-10-13 16:45:40.084 [12] |   }, 
2018-10-13 16:45:40.084 [12] |   DebugTraceVBTest.Readme.Contact {
2018-10-13 16:45:40.084 [12] |     ____ DebugTraceVBTest.Readme.Entity ____
2018-10-13 16:45:40.084 [12] |     Id: 2, 
2018-10-13 16:45:40.084 [12] |     ____ DebugTraceVBTest.Readme.ContactBase ____
2018-10-13 16:45:40.084 [12] |     FirstName: "Yukari", LastName: "Apple", 
2018-10-13 16:45:40.084 [12] |     ____ DebugTraceVBTest.Readme.Contact ____
2018-10-13 16:45:40.084 [12] |     Birthday: 1992-03-04 00:00:00.0000000, 
2018-10-13 16:45:40.084 [12] |   }, 
2018-10-13 16:45:40.084 [12] | } (ReadmeExamples.vb:20)
2018-10-13 16:45:40.085 [12] | 
2018-10-13 16:45:40.085 [12] Leave DebugTraceVBTest.Readme.ReadmeExample1.Example1() (ReadmeExamples.vb:22) time: 00:00:00.0212932
----

==== 3.1 using System.Diagnostics(Imports System.Diagnostics)を行っている場合

`System.Diagnostics` 名前空間を `using`(`Imports`) している場合は、 `DebugTrace.CSharp.Trace`(`DebugTrace.VisualBaisc.Trace`) プロパティと `System.Diagnostics.Trace` クラスが重なるため、`Trace` プロパティを直接使用できません。 +
その場合は、`using static DebugTrace.CSharp`(`Imports DebugTrace.VisualBasic`)ではなく `using DebugTrace` (`Imports DebugTrace`)、および `Trace` ではなく `CSharp.Trace`(`VisualBasic.Trace`)を使用してください。

[source,csharp]
.ReadmeExample.cs
----
using System.Diagnostics;
using DebugTrace; // for Debugging

namespace Readme {
    public class ReadmeExample {
        public static void Main(string[] args) {
            CSharp.Trace.Enter(); // for Debugging
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System.Diagnostics
Imports DebugTrace ' for Debugging

Namespace Global.Readme
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            VisualBasic.Trace.Enter() ' for Debugging
----

=== 4. インタフェース、クラス

主に以下のインタフェース、クラスがあります。

[options="header", width="100%"]
.インタフェース、クラス
|===
|名前    |スーパークラス、実装するインタフェース|説明
|`DebugTrace.ITrace`       |_なし_              |Trace処理のインタフェース
|`DebugTrace.TraceBase`    |`DebugTrace.ITrace` |Trace処理のベースクラス
|`DebugTrace.CSharp`       |`DebugTrace.Trace`  |C#用のTrace処理のクラス
|`DebugTrace.VisualBasic`  |`DebugTrace.Trace`  |VisualBasic用のTrace処理のクラス
|`DebugTrace.ILogger`      |_なし_              |ログ出力のインタフェース
|`DebugTrace.Console`      |`DebugTrace.ILogger`|ログをコンソール出力する抽象クラス
|`DebugTrace.Console+Out`  |`DebugTrace.Console`|ログを標準出力に出力するクラス
|`DebugTrace.Console+Error`|`DebugTrace.Console`|ログを標準エラー出力に出力するクラス
|===

=== 5. DebugTrace.CSharpおよびDebugTrace.VisualBasicクラスのプロパティ

`DebugTrace.CSharp` クラスと `DebugTrace.VisualBasic` クラスには自身の型のインスタンスとして `Trace` プロパティがあります。

=== 6. ITraceインタフェースのプロパティおよびメソッド

以下のプロパティおよびメソッドがあります。

[options="header", width="60%"]
.プロパティ
|===

|名前|説明
|`IsEnabled`
|ログ出力が有効なら `true` 、そうでなければ `false`  (`get` のみ)

|`LastLog`
|最後に出力したログ文字列 (`get` のみ)

|===

[options="header", cols="1,4,2,3"]
.メソッド
|===
|名 前|引 数|戻り値|説明

|`ResetNest`
|なし
|なし
|現在のスレッドのネストレベルを初期化する

|`Enter`
|なし
|`int` スレッドID
|メソッドの開始をログに出力する

|`Leave`
|`int threadId`: スレッドID (デフォルト: `-1`)
|なし
|メソッドの終了をログに出力する

|`Print`
|`string message`: メッセージ
|なし
|メッセージをログに出力する

|`Print`
|`Func<string> messageSupplier`: メッセージを返す関数
|なし
|`messageSupplier` からメッセージを取得してログに出力する

|`Print`
|`string name`: 値の名前 +
`object value`: 値
|なし
|`<値の名前> = <値>` +
の形式でログに出力する

|`Print`
|`string name`: 値の名前 +
`Func<object> valueSupplier`: 値を返す関数
|なし
|`valueSupplier` から値を取得して +
`<値の名前> = <値>` +
の形式でログに出力する

|===

=== 7. *DebugTrace.properties* ファイルのプロパティ

DebugTrace は、カレントディレクトリにある `DebugTrace.properties` ファイルを起動時に読み込みます。
[.small]#(バージョン 1.4.0より、それより前のバージョンでは、DebugTrace.dllと同一ディレクトリにある `DebugTrace.properties` を読み込む)# +
`DebugTrace.properties` ファイルでは以下のプロパティを指定できます。

[options="header", cols="2,8"]
.DebugTrace.properties
|===
|プロパティ名|説明
|`Logger`
| DebugTrace が使用するロガー +
[.small]#*設定例:*# +
`Logger = Console+Out` [.small .blue]#- コンソール(標準出力)へ出力# + 
`Logger = Console+Error` [.small .blue]#- コンソール(標準エラー出力)へ出力# [.small .blue]#*_[デフォルト]_*# + 
`Logger = Log4net` [.small .blue]#- log4netを使用して出力# + 
`Logger = NLog` [.small .blue]#- NLogを使用して出力# +
[.small]#*設定例(複数):*# [.small .blue]#*_(1.5.0~)_*# +
`Logger = Console+Out; Log4net` [.small .blue]#- コンソール(標準出力)およびlog4netを使用して出力# + 

|`LogLevel`
|出力する際に使用するログレベル +
[.small]#*Log4netを使用する際の設定例:*# +
`LogLevel = All` +
`LogLevel = Finest` +
`LogLevel = Verbose` +
`LogLevel = Finer` +
`LogLevel = Trace` +
`LogLevel = Fine` +
`LogLevel = Debug`  [.small .blue]#*_[デフォルト]_*# +
`LogLevel = Info` +
`LogLevel = Notice` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Severe` +
`LogLevel = Critical` +
`LogLevel = Alert` +
`LogLevel = Fatal` +
`LogLevel = Emergency` +
`LogLevel = Off` +
[.small]#*NLogを使用する際の設定例:*# +
`LogLevel = Trace` +
`LogLevel = Debug`  [.small .blue]#*_[デフォルト]_*# +
`LogLevel = Info` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Fatal` +
`LogLevel = Off` +
[.small]#*Log4netとNLogを同時使用する際の設定例:*#  [.small .blue]#(Logger = Log4net; NLog)# +
`LogLevel = Debug` [.small .blue]#- Log4netとNLogの両方にDebugレベルで出力# +
`LogLevel = Finer; Trace` [.small .blue]#- Log4netではFinerレベル、NLogではTraceレベルで出力 *_(1.5.0~)_*# +

|`EnterString`
|`Enter` メソッドで出力される文字列 +
[.small]#*設定例:*# +
`EnterString = 開始 {0}.{1} ({2}:{3:D})` [.small .blue]#*_[デフォルト]_*# +
[.small]#*パラメータ:*# +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号 +

|`LeaveString`
|`Leave` メソッドで出力される文字列 +
[.small]#*設定例:*# +
`LeaveString = 終了 {0}.{1} ({2}:{3:D}) time: {4}` [.small .blue]#*_[デフォルト] (1.4.3~)_*# +
`LeaveString = 終了 {0}.{1} ({2}:{3:D})` [.small .blue]#*_[デフォルト] (1.4.3より前)_*# +
[.small]#*パラメータ:*# +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号 +
`{4}`: 対応する `Enter` メソッドを呼び出してからの時間 [.small .blue]#*_(1.4.3~)_*# +

|`ThreadBoundaryString`
|スレッド境界で出力される文字列 +
[.small]#*設定例:*# +
[.small]#`ThreadBoundaryString = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ Thread {0} \__\__\__\__\__\__\__\__\__\__\__\__\__\____`# +
[.small .blue]#*_[デフォルト]_*# +
[.small]#*パラメータ:*# +
`{0}`: スレッドID +

|`ClassBoundaryString`
|クラス境界での出力文字列 +
[.small]#*設定例:*# +
`ClassBoundaryString = \\____ {0} \____` [.small .blue]#*_[デフォルト]_*# +
[.small]#*パラメータ:*# +
`{0}`: クラス名 +

|`CodeIndentString`
|コードのインデント文字列 +
[.small]#*設定例:*# +
`CodeIndentString = &#x7c;\s` [.small .blue]#*_[デフォルト]_*# +
[.small .blue]#`\s` は空白文字に置き換えられる# +

|`DataIndentString`
|データのインデント 文字列 +
[.small]#*設定例:*# +
`DataIndentString = \s\s` [.small .blue]#*_[デフォルト]_*# +
[.small .blue]#`\s` は空白文字に置き換えられる# +

|`LimitString`
|制限を超えた場合の出力文字列 +
[.small]#*設定例:*# +
`LimitString = \...` [.small .blue]#*_[デフォルト]_*# +

|`DefaultNameSpaceString` +
|デフォルトの名前空間を置き換える文字列 +
[.small]#*設定例:*# +
DefaultNameSpaceString = `\...` [.small .blue]#*_[デフォルト]_*# +

|`NonPrintString`
|出力しないプロパティ値の文字列 +
[.small]#*設定例:*# +
NonPrintString = `\***` [.small .blue]#*_[デフォルト]_*# +

|`CyclicReferenceString`
|循環参照時の出力文字列 +
[.small]#*設定例:*# +
`CyclicReferenceString = \*\** Cyclic Reference \***` [.small .blue]#*_[デフォルト]_*# +

|`VarNameValueSeparator`
|変数名と値のセパレータ +
[.small]#*設定例:*# +
`VarNameValueSeparator = \s=\s` [.small .blue]#*_[デフォルト]_*# +
[.small .blue]#`\s` は空白文字に置き換えられる# +

|`KeyValueSeparator`
|辞書のキーと値のセパレータまたはプロパティ名/フィールド名と値 のセパレータ +
[.small]#*設定例:*# +
`KeyValueSeparator = :\s` [.small .blue]#*_[デフォルト]_*# +
[.small .blue]#`\s` は空白文字に置き換えられる# +

|`PrintSuffixFormat`
|`print` メソッドで付加される文字列 +
[.small]#*設定例:*# +
`PrintSuffixFormat = \s({2}:{3:D})` [.small .blue]#*_[デフォルト]_*# +
[.small .blue]#`\s` は空白文字に置き換えられる# +
[.small]#*パラメータ:*# +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号 +

|`DateTimeFormat`
|日時の出力フォーマット +
[.small]#*設定例:*# +
`DateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fffffffK}` [.small .blue]#*_[デフォルト] (1.4.1~)_*# +
`DateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fffffffK}` [.small .blue]#*_[デフォルト] (1.4.1より前)_*# +
[.small]#*パラメータ:*# +
`{0}`: `DateTime` オブジェクト +

|`LogDateTimeFormat` +
 +
[.small .blue]#*_(1.3.0~)_*#
|ログ出力時の日時の出力フォーマット +
[.small]#*設定例:*# +
`LogDateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fff} [{1:D2}] {2}` [.small .blue]#*_[デフォルト] (1.4.2~)_*# +
`LogDateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fff}` [.small .blue]#*_[デフォルト] (1.4.2より前)_*# +
[.small]#*パラメータ:*# +
`{0}`: ログの出力日時 +
`{1}`: スレッドID [.small .blue]#*_(1.4.2~)_*# +
`{2}`: ログ内容 [.small .blue]#*_(1.4.2~)_*# +

|`MaxDataOutputWidth`
|データの出力幅の最大値 +
[.small]#*設定例:*# +
`MaxDataOutputWidth = 80` [.small .blue]#*_[デフォルト]_*# +

|`CollectionLimit`
|`ICollection` 要素の出力数の限界値 +
[.small]#*設定例:*# +
`CollectionLimit = 512` [.small .blue]#*_[デフォルト]_*# +

|`StringLimit`
|`string` の出力文字数の制限 +
[.small]#*設定例:*# +
`StringLimit = 8192` [.small .blue]#*_[デフォルト]_*# +

|`ReflectionNestLimit`
|リフレクションのネストの限界値 +
[.small]#*設定例:*# +
`ReflectionNestLimit = 4` [.small .blue]#*_[デフォルト]_*# +

|`NonPrintProperties`
|出力しないプロパティおよびフィールドの配列 +
[.small]#*設定例(1つ):*# +
`NonPrintProperties = DebugTraceExample.Node.Parent` +
[.small]#*設定例(複数):*# +
`NonPrintProperties = \` +
  `DebugTraceExample.Node.Parent,\` +
  `DebugTraceExample.Node.Left,\` +
  `DebugTraceExample.Node.Right` +
[.small .blue]#デフォルトは未設定# +
[.small]#*値のフォーマット:*# +
`<フルクラス名>.<プロパティ名またはフィールド名>` +

|`DefaultNameSpace`
|デフォルトの 名前空間 +
[.small]#*設定例:*# +
`DefaultNameSpace = DebugTraceExample` +
[.small .blue]#デフォルトは未設定# +

|`ReflectionClasses`
|`ToString` メソッドを実装していてもリフレクションで内容を出力するクラス名のセット +
[.small]#*設定例(1つ):*# +
`ReflectionClasses = DebugTraceExample.Point` +
[.small]#*設定例(複数):*# +
`ReflectionClasses = \` +
  `DebugTraceExample.Point,\` +
  `DebugTraceExample.Rectangle` +
[.small .blue]#デフォルトは未設定# +

|`OutputNonPublicFields`
 +
[.small .blue]#*_(1.4.4~)_*#
|`true` の場合、`public` ではないフィールドもリフレクションで内容を出力する +
[.small]#*設定例:*# +
`OutputNonPublicFields = true` +
`OutputNonPublicFields = false` [.small .blue]#*_[デフォルト]_*# +

|`OutputNonPublicProperties`
 +
[.small .blue]#*_(1.4.4~)_*#
|`true` の場合、`public` ではないプロパティもリフレクションで内容を出力する +
[.small]#*設定例:*# +
`OutputNonPublicProperties = true` +
`OutputNonPublicProperties = false` [.small .blue]#*_[デフォルト]_*# +

|===

==== 7.1. DebugTrace.propertiesファイルの追加

以下の手順でプロジェクトに `DebugTrace.properties` ファイルを追加します。

. プロジェクトのコンテキストメニューから `追加` - `新しい項目...` を選択する。

. ダイアログで、 `テキスト ファイル` を選択し、名前を `DebugTrace.properties` にして `追加` ボタンをクリックする。 +

. 追加された `DebugTrace.properties` のコンテキストメニューから `プロパティ` を選択する。

. `プロパティ` の `*詳細*` セクションにある `出力ディレクトリにコピー` の設定値を `新しい場合はコピーする` または `常にコピーする` に変更する。

==== 7.2. *NonPrintProperties*, *NonPrintString*

DebugTrace は、 `ToString` メソッドが実装されていない場合は、リフレクションを使用してオブジェクト内容を出力します。
他のオブジェクトの参照があれば、そのオブジェクトの内容も出力します。
ただし循環参照がある場合は、自動的に検出して出力を中断します。  
`NonPrintProperties` プロパティを指定して出力を抑制する事もできます。
このプロパティの値は、カンマ区切りで複数指定できます。  
`NonPrintProperties` で指定されたプロパティの値は、 `NonPrintString` で指定された文字列(デフォルト: `\***`)で出力されます。

.NonPrintPropertiesの例
----
NonPrintProperties = DebugTraceExample.Node.Parent
----

.NonPrintProperties(複数指定)の例
----
NonPrintProperties = \
    DebugTraceExample.Node.Parent,\
    DebugTraceExample.Node.Left,\
    DebugTraceExample.Node.Right
----

=== 8. ロギング・ライブラリの使用

コンソール出力以外に以下のライブラリを使用してログ出力が可能です。

[options="header", width="60%"]
.ロギング・ライブラリ
|===
|ライブラリ名|必要なパッケージ  |API
|log4net     |DebugTrace.Log4net|.NET Framework 4.7
|NLog        |DebugTrace.NLog   |.NET Framework 4.7
|===

使用する場合は、上記パッケージをNuGetから追加してください。

ロギング・ライブラリを使用する際のDebugTraceのロガー名は、 `DebugTrace` です。

==== 8-1. log4net

[source,properties]
.DebugTrace.propertiesの例
----
# DebugTrace.properties
Logger = Log4net
----

[source,csharp]
.AssemblyInfo.csの追加例
----
[assembly: log4net.Config.XmlConfigurator(ConfigFile=@"Log4net.config", Watch=true)]
----

[source,xml]
.Log4net.configの例
----
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <log4net>
    <appender name="A" type="log4net.Appender.FileAppender">
      <File value="C:/Logs/DebugTrace/Log4net.log" />
      <AppendToFile value="true" />
      <ImmediateFlush value="true" />
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <layout type="log4net.Layout.PatternLayout">
        <ConversionPattern value="%date [%thread] %-5level %logger %message%n" />
      </layout>
    </appender>
    <root>
      <level value="DEBUG" />
      <appender-ref ref="A" />
    </root>
  </log4net>
</configuration>
----

==== 8-2. NLog

[source,properties]
.DebugTrace.propertiesの例
----
# DebugTrace.properties
Logger = NLog
----

[source,xml]
.NLog.configの例
----
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="C:/Logs/DebugTrace/NLog-internal.log">
  <targets>
    <target xsi:type="File" name="f" fileName="C:/Logs/DebugTrace/NLog.log" encoding="utf-8"
            layout="${longdate} [${threadid}] ${uppercase:${level}} ${logger} ${message}" />
  </targets>
  <rules>
    <logger name="*" minlevel="Debug" writeTo="f" />
  </rules>
</nlog>
----

=== 9. ライセンス

link:LICENSE[MIT ライセンス(MIT)]

_(C) 2018 Masato Kokubo_
