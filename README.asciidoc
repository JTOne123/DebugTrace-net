= DebugTrace-net

link:README_ja.asciidoc[[Japanese]]

*DebugTrace-net* is a library that outputs trace logs when debugging .NET programs. It corresponds to https://docs.microsoft.com/en-us/dotnet/standard/net-standard[.NET Standard 2.0]. +
By embedding `Trace.Enter()` and `Trace.Leave()` at the start and end of methods, you can output the execution status of the program under development to the log.

=== 1. Features

* Automatically outputs caller's *class name*, *method name*, *source file name* and *line number*.
* *Automatically indents* the log with nesting methods and objects.
* *Automatically breaks* at the output of values.
* Automatically output logs when *changing threads*.
* Uses *reflection* to output objects of classes that do not implement `ToString` method.
* You can customize the output content in `DebugTrace.properties`.
* There is *no dependency library* if you output to the console
* You can use the following logging library.
    ** https://logging.apache.org/log4net/[log4net]
    ** http://nlog-project.org/[NLog]

=== 2. Install

Search `DebugTrace` packege on NuGet and install it. +
If you output logs using https://logging.apache.org/log4net/[log4net] or http://nlog-project.org/[NLog],
install `DebugTrace.Log4net` or `DebugTrace.NLog` package.
`DebugTrace.Log4net` and `DebugTrace.NLog` package corresponds to .NET Framework 4.7 instead of https://docs.microsoft.com/en-us/dotnet/standard/net-standard[.NET Standard].

=== 3. How to use

Do the following for debug target and related methods.

. Insert `Trace.Enter()` at the beginning of methods.
. Insert `Trace.Leave()` at the end of methods or just before the `return` statements.
. Insert `Trace.Print("foo", foo)` to output arguments, local variables and return value to the log if necessary.

The following are examples of C# and Visual Basic source used DebugTrace-net methods and the log of when it has been executed.

[source,csharp]
.ReadmeExample.cs
----
using System;
using static DebugTrace.CSharp; // for Debugging

namespace Readme {
    /// <summary>ReadmeExample</summary>
    public class ReadmeExample {
        public static void Main(string[] args) {
            Trace.Enter(); // for Debugging

            var contact = new [] {
                new Contact(1, "Akane" , "Apple", new DateTime(1991, 2, 3)),
                new Contact(2, "Yukari", "Apple", new DateTime(1992, 3, 4))
            };
            Trace.Print("contact", contact); // for Debugging

            Trace.Leave(); // for Debugging
        }
    }

    /// <summary>Entity</summary>
    public class Entity {
        public int ID;

        public Entity(int id) {
            ID = id;
        }
    }

    /// <summary>ContactBase</summary>
    public class ContactBase : Entity {
        public string FirstName;
        public string LastName;

        public ContactBase(int id, string firstName, string lastName) : base(id) {
            FirstName = firstName; LastName  = lastName ;
        }
    }

    /// <summary>Contact</summary>
    public class Contact : ContactBase {
        public DateTime Birthday;

        public Contact(int id, string firstName, string lastName, DateTime birthday) : base(id, firstName, lastName) {
            Birthday  = birthday ;
        }
    }
}
----

.Console output / C#
----
2018-05-26 12:47:41.234 ______________________________ Thread 1 ______________________________
2018-05-26 12:47:41.234
2018-05-26 12:47:41.297 Enter Readme.ReadmeExample1.Main(String[] args) (ReadmeExample.cs:8)
2018-05-26 12:47:41.322 |
2018-05-26 12:47:41.323 | contact = Readme.Contact[2] {
2018-05-26 12:47:41.323 |   Readme.Contact {
2018-05-26 12:47:41.323 |     ____ Readme.Entity ____
2018-05-26 12:47:41.324 |     ID: 1,
2018-05-26 12:47:41.324 |     ____ Readme.ContactBase ____
2018-05-26 12:47:41.324 |     FirstName: "Akane", LastName: "Apple",
2018-05-26 12:47:41.324 |     ____ Readme.Contact ____
2018-05-26 12:47:41.324 |     Birthday: 1991-02-03 00:00:00.000,
2018-05-26 12:47:41.324 |   },
2018-05-26 12:47:41.324 |   Readme.Contact {
2018-05-26 12:47:41.324 |     ____ Readme.Entity ____
2018-05-26 12:47:41.324 |     ID: 2,
2018-05-26 12:47:41.324 |     ____ Readme.ContactBase ____
2018-05-26 12:47:41.324 |     FirstName: "Yukari", LastName: "Apple",
2018-05-26 12:47:41.324 |     ____ Readme.Contact ____
2018-05-26 12:47:41.325 |     Birthday: 1992-03-04 00:00:00.000,
2018-05-26 12:47:41.325 |   },
2018-05-26 12:47:41.325 | } (ReadmeExample.cs:14)
2018-05-26 12:47:41.326 |
2018-05-26 12:47:41.329 Leave Readme.ReadmeExample1.Main(String[] args) (ReadmeExample.cs:16)
----

[source,vb.net]
.ReadmeExample.vb
----
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Global.Readme
    ''' <summary>ReadmeExample</summary>
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            Trace.Enter() ' for Debugging

            Dim contact = New Contact() {
                New Contact(1, "Akane", "Apple", New DateTime(1991, 2, 3)),
                New Contact(2, "Yukari", "Apple", New DateTime(1992, 3, 4))
            }
            Trace.Print(NameOf(contact), contact) ' for Debugging

            Trace.Leave() ' for Debugging
        End Sub
    End Class

    ''' <summary>Entity</summary>
    Public Class Entity
        Public Property ID As Integer

        Public Sub New(id_ As Integer)
            ID = id_
        End Sub
    End Class

    ''' <summary>ContactBase</summary>
    Public Class ContactBase : Inherits Entity
        Public Property FirstName As String
        Public Property LastName As String

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String)
            MyBase.New(id_)
            FirstName = firstName_ : LastName = lastName_
        End Sub
    End Class

    ''' <summary>Contact</summary>
    Public Class Contact : Inherits ContactBase
        Public Birthday As DateTime

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String, birthday_ As DateTime)
            MyBase.New(id_, firstName_, lastName_)
            Birthday = birthday_
        End Sub
    End Class
End Namespace
----

.Console output / Visual Basic
----
2018-05-26 12:55:04.154 ______________________________ Thread 1 ______________________________
2018-05-26 12:55:04.154
2018-05-26 12:55:04.215 Enter Readme.ReadmeExample.Main(String[] args) (ReadmeExample.vb:7)
2018-05-26 12:55:04.241 |
2018-05-26 12:55:04.243 | contact = Readme.Contact(Length: 2) {
2018-05-26 12:55:04.243 |   Readme.Contact {
2018-05-26 12:55:04.243 |     ____ Readme.Entity ____
2018-05-26 12:55:04.243 |     ID: 1,
2018-05-26 12:55:04.243 |     ____ Readme.ContactBase ____
2018-05-26 12:55:04.243 |     FirstName: "Akane", LastName: "Apple",
2018-05-26 12:55:04.243 |     ____ Readme.Contact ____
2018-05-26 12:55:04.243 |     Birthday: 1991-02-03 00:00:00.000,
2018-05-26 12:55:04.244 |   },
2018-05-26 12:55:04.244 |   Readme.Contact {
2018-05-26 12:55:04.244 |     ____ Readme.Entity ____
2018-05-26 12:55:04.244 |     ID: 2,
2018-05-26 12:55:04.244 |     ____ Readme.ContactBase ____
2018-05-26 12:55:04.244 |     FirstName: "Yukari", LastName: "Apple",
2018-05-26 12:55:04.244 |     ____ Readme.Contact ____
2018-05-26 12:55:04.244 |     Birthday: 1992-03-04 00:00:00.000,
2018-05-26 12:55:04.244 |   },
2018-05-26 12:55:04.244 | } (ReadmeExample.vb:13)
2018-05-26 12:55:04.245 |
2018-05-26 12:55:04.249 Leave Readme.ReadmeExample.Main(String[] args) (ReadmeExample.vb:15)
----

==== 3.1 If using or Imports System.Diagnostics

If you are `using` or `Impors System.Diagnostics`, since the `DebugTrace.CSharp.Trace` (`DebugTrace.VisualBaisc.Trace`) property and `System.Diagnostics.Trace` class overlap, you can not use `Trace` property directly. +
In that case, use `using DebugTrace` (`Imports DebugTrace`) instead of `using static DebugTrace.CSharp` (`Imports DebugTrace.VisualBasic`) and `CSharp.Trace` (`VisualBasic.Trace`) instead of `Trace`.

[source,csharp]
.ReadmeExample.cs
----
using System.Diagnostics;
using DebugTrace; // for Debugging

namespace Readme {
    public class ReadmeExample {
        public static void Main(string[] args) {
            CSharp.Trace.Enter(); // for Debugging
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System.Diagnostics
Imports DebugTrace ' for Debugging

Namespace Global.Readme
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            VisualBasic.Trace.Enter() ' for Debugging
----

=== 4. Interfaces and Classes

There are mainly the following interfaces and classes.

[options="header", width="100%"]
.Interfaces and Classes
|===
|Name     |Super Class or Implemented Interfaces|Description
|`DebugTrace.ITrace`       |_None_              |Trace processing interface
|`DebugTrace.TraceBase`    |`DebugTrace.ITrace` |Trace processing base class
|`DebugTrace.CSharp`       |`DebugTrace.Trace`  |Trace processing class for C#
|`DebugTrace.VisualBasic`  |`DebugTrace.Trace`  |Trace processing class for VisualBasic
|`DebugTrace.ILogger`      |_None_              |Log output interface
|`DebugTrace.Console`      |`DebugTrace.ILogger`|Abstract class that outputs logs to the console
|`DebugTrace.Console+Out`  |`DebugTrace.Console`|Class outputting logs to standard output
|`DebugTrace.Console+Error`|`DebugTrace.Console`|Class outputting logs to standard error output
|===

=== 5. Properties of DebugTrace.CSharp class and DebugTrace.VisualBasic class

`DebugTrace.CSharp` and `DebugTrace.VisualBasic` class has `Trace` property as an instance of its own type.

=== 6. Properties and methods of ITrace interface

It has the following properties and methods.

[options="header", width="60%"]
.Properties
|===
|Name|Description

|`IsEnabled`
|`true` if log output is enabled, `false` otherwise (`get` only)

|`LastLog`
|Last log string outputted (`get` only)

|===

[options="header", cols="1,4,2,3"]
.Methods
|===
|Name|Arguments|Return Value|Description

|`ResetNest`
|_None_
|_None_
|Initializes the nesting level for the current thread.

|`Enter`
|_None_
|`int` thread ID
|Outputs method start to log.

|`Leave`
|`int threadId`: the thread ID (default: `-1`)
|_None_
|Outputs method end to the log.

|`Print`
|`string message`: the message
|_None_
|Outputs the message to the log.

|`Print`
|`Func<string> messageSupplier`: the function to return a message
|_None_
|Gets a message from `messageSupplier` and output it to the log.

|`Print`
|`string name`: the name of the value +
`object value`: the value
|_None_
|Outputs to the log in the form of `"Name = Value"`

|`Print`
|`string name`: the name of the value +
`Func<object> valueSupplier`:  the function to return a value
|_None_
|Gets a value from `valueSupplier` and output it to the log in the form of `"Name = Value"`.

|===

=== 7. Properties of *DebugTrace.properties* file

DebugTrace reads the `DebugTrace.properties` file in the same directory as DebugTrace.dll at startup.
You can specify following properties in the `DebugTrace.properties` file.  

[options="header", cols="2,8"]
.DebugTrace.properties
|===
|Property Name|Description

|`Logger`
|Logger DebugTrace uses +
[.small]#*Examples:*# +
`Logger = Console+Out` [.small .blue]#Output to the console (stdout)# +
`Logger = Console+Error` [.small .blue]#Output to the console (stderr)# [.small .blue]#*_(Default)_*# + 
`Logger = Log4net` [.small .blue]#use Log4net# +
`Logger = NLog` [.small .blue]#use NLog# +

|`LogLevel`
|Log level to use +
[.small]#*Examples when use Log4net:*# +
`LogLevel = All` +
`LogLevel = Finest` +
`LogLevel = Verbose` +
`LogLevel = Finer` +
`LogLevel = Trace` +
`LogLevel = Fine` +
`LogLevel = Debug` [.small .blue]#*_(Default)_*# +
`LogLevel = Info` +
`LogLevel = Notice` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Severe` +
`LogLevel = Critical` +
`LogLevel = Alert` +
`LogLevel = Fatal` +
`LogLevel = Emergency` +
`LogLevel = Off` +
[.small]#*Examples when use NLog:*# +
`LogLevel = Trace` +
`LogLevel = Debug` [.small .blue]#*_(Default)_*# +
`LogLevel = Info` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Fatal` +
`LogLevel = Off` +

|`EnterString`
|The string output by `enter` method +
[.small]#*Example:*# +
`EnterString = Enter {0}.{1} ({2}:{3:D})` [.small .blue]#*_(Default)_*# +
[.small]#*Parameters:*# +
`{0}`: The class name of the caller +
`{1}`: The method name of the caller +
`{2}`: The file name of the caller +
`{3}`: The line number of the caller +

|`LeaveString`
|The string output by `leave` method +
[.small]#*Example:*# +
`LeaveString = Leave {0}.{1} ({2}:{3:D})` [.small .blue]#*_(Default)_*# +
[.small]#*Parameters:*# +
`{0}`: The class name of the caller +
`{1}`: The method name of the caller +
`{2}`: The file name of the caller +
`{3}`: The line number of the caller +

|`ThreadBoundaryString`
|The string output in the threads boundary. +
[.small]#*Example:*# +
[.small]#`ThreadBoundaryString = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ Thread {0} \__\__\__\__\__\__\__\__\__\__\__\__\__\____`# +
[.small .blue]#⯅*Default*# +
[.small]#*Parameter:*# +
`{0}`: The thread ID +

|`ClassBoundaryString`
|The string output in the classes boundary. +
[.small]#*Example:*# +
`ClassBoundaryString = \\____ {0} \____` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
`{0}`: The class name +

|`CodeIndentString`
|The string of one code indent +
[.small]#*Example:*# +
`CodeIndentString = &#x7c;\s` [.small .blue]#*_(Default)_*# +
[.small .blue]#`\s` is replaced to a space character# +

|`DataIndentString`
|The string of one data indent +
[.small]#*Example:*# +
`DataIndentString = \s\s` [.small .blue]#*_(Default)_*# +
[.small .blue]#`\s` is replaced to a space character# +

|`LimitString`
|The string to represent that it has exceeded the limit +
[.small]#*Example:*# +
`LimitString = \...` [.small .blue]#*_(Default)_*# +

|`DefaultNameSpaceString` +
|The string replacing the default namespace part +
[.small]#*Example:*# +
`DefaultNameSpaceString = \...` [.small .blue]#*_(Default)_*# +

|`NonPrintString` +
|The string of value in the case of properties that do not output the value +
[.small]#*Example:*# +
`NonPrintString = \***` [.small .blue]#*_(Default)_*# +

|`CyclicReferenceString`
|The string to represent that the cyclic reference occurs +
[.small]#*Example:*# +
`CyclicReferenceString = \*\** Cyclic Reference \***` [.small .blue]#*_(Default)_*#

|`VarNameValueSeparator`
|The separator string between the variable name and value +
[.small]#*Example:*# +
`VarNameValueSeparator = \s=\s` [.small .blue]#*_(Default)_*# +
[.small .blue]#`\s` is replaced to a space character# +

|`KeyValueSeparator`
|The separator string between the key and value for Map object +
and between the property/field name and value +
[.small]#*Example:*# +
`KeyValueSeparator = :\s` [.small .blue]#*_(Default)_*# +
[.small .blue]#`\s` is replaced to a space character# +

|`PrintSuffixFormat`
|Output format of `print` method suffix +
[.small]#*Example:*# +
`PrintSuffixFormat = \s({2}:{3:D})` [.small .blue]#*_(Default)_*# +
[.small .blue]#`\s` is replaced to a space character# +
[.small]#*Parameters:*# +
`{0}`: The class name of the caller +
`{1}`: The method name of the caller +
`{2}`: The file name of the caller +
`{3}`: The line number of the caller +

|`DateTimeFormat`
|Output format of DateTime +
[.small]#*Example:*# +
`DateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fffK}` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
`{0}`: The `DateTime` object +

|`LogDateTimeFormat` +
 +
[.gray]#_since 1.3.0_#
|Output format of date and time when outputting logs +
[.small]#*Example:*# +
`LogDateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fff}` [.small .blue]#*_(Default)_*# +
[.small]#*Parameter:*# +
`{0}`: The `DateTime` object +

|`MaxDataOutputWidth`
|Maximum output width of data* +
[.small]#*Example:*# +
`MaxDataOutputWidth = 80` [.small .blue]#*_(Default)_*# +

|`CollectionLimit`
|*Limit* value of `ICollection` elements to output +
[.small]#*Example:*# +
`CollectionLimit = 512` [.small .blue]#*_(Default)_*# +

|`StringLimit`
|*Limit* value of `string` characters to output +
[.small]#*Example:*# +
`StringLimit = 8192` [.small .blue]#*_(Default)_*# +

|`ReflectionNestLimit`
|Limit value of reflection nest +
[.small]#*Example:*# +
`ReflectionNestLimit = 4` [.small .blue]#*_(Default)_*# +

|`NonPrintProperties` +
|Properties and fields not to be output value +
[.small]#*Example (One value):*# +
`NonPrintProperties = DebugTraceExample.Node.Parent` +
[.small]#*Example (Multiple values):*# +
`NonPrintProperties = \` +
  `DebugTraceExample.Node.Parent,\` +
  `DebugTraceExample.Node.Left,\` +
  `DebugTraceExample.Node.Right` +
[.small]#*format:*# +
`<full class name>.<property or field name>` +
[.small .blue]#The default value is unspecified#

|`DefaultNameSpace` +
|Default namespace of your java source +
[.small]#*Example:*# +
`DefaultNameSpace = DebugTraceExample` +
[.small .blue]#The default value is unspecified#

|`ReflectionClasses` +
|Classe names that output content by reflection even if `ToString` method is implemented
[.small]#*Example (One value):*# +
`ReflectionClasses = DebugTraceExample.Point` +
[.small]#*Example (Multiple values):*# +
`ReflectionClasses = \` +
  `DebugTraceExample.Point,\` +
  `DebugTraceExample.Rectangle` +
[.small .blue]#The default value is unspecified#

|===

==== 7.1. *NonPrintProperties*, *NonPrintString*

DebugTrace use reflection to output object contents if the `ToString` method is not implemented.
If there are other object references, the contents of objects are also output.
However, if there is circular reference, it will automatically detect and suspend output.
You can suppress output by specifying the `NonPrintProperties` property and
can specify multiple values of this property separated by commas.  
The value of the property specified by `NonPrintProperties` are output as the string specified by `NonPrintString` (default: `\***`).

.Example of NonPrintProperties
----
NonPrintProperties = DebugTraceExample.Node.Parent
----

.Example of NonPrintProperties (Multiple specifications)
----
NonPrintProperties = \
    DebugTraceExample.Node.Parent,\
    DebugTraceExample.Node.Left,\
    DebugTraceExample.Node.Right
----

=== 8. Examples of using logging libraries

You can output logs using the following libraries besides console output.

[options="header", width="60%"]
.logging Libraries
|===
|Library Name|Required package  |API
|log4net     |DebugTrace.Log4net|.NET Framework 4.7
|NLog        |DebugTrace.NLog   |.NET Framework 4.7
|===

To use them, add the above package from NuGet.

The logger name of DebugTrace is `DebugTrace`.   

==== 8-1. log4net

[source,properties]
.Example of DebugTrace.properties
----
# DebugTrace.properties
Logger = Log4net
----

[source,csharp]
.Additional example of AssemblyInfo.cs
----
[assembly: log4net.Config.XmlConfigurator(ConfigFile=@"Log4net.config", Watch=true)]
----

[source,xml]
.Example of Log4net.config
----
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <log4net>
    <appender name="A" type="log4net.Appender.FileAppender">
      <File value="C:/Logs/DebugTrace/Log4net.log" />
      <AppendToFile value="true" />
      <ImmediateFlush value="true" />
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <layout type="log4net.Layout.PatternLayout">
        <ConversionPattern value="%date [%thread] %-5level %logger %message%n" />
      </layout>
    </appender>
    <root>
      <level value="DEBUG" />
      <appender-ref ref="A" />
    </root>
  </log4net>
</configuration>
----

==== 8-2. NLog

[source,properties]
.Example of DebugTrace.properties
----
# DebugTrace.properties
Logger = NLog
----

[source,xml]
.Example of NLog.config
----
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="C:/Logs/DebugTrace/NLog-internal.log">
  <targets>
    <target xsi:type="File" name="f" fileName="C:/Logs/DebugTrace/NLog.log" encoding="utf-8"
            layout="${longdate} [${threadid}] ${uppercase:${level}} ${logger} ${message}" />
  </targets>
  <rules>
    <logger name="*" minlevel="Debug" writeTo="f" />
  </rules>
</nlog>
----

=== 9. License

link:LICENSE[The MIT License (MIT)]

[gray]#_(C) 2018 Masato Kokubo_#
